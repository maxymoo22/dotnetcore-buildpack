#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

if [ "$STACK" != "heroku-16" ] && [ "$STACK" != "heroku-18" ]; then
	echo "Need heroku-16 or heroku-18 stack"
	exit 1
fi

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

### Load dependencies
source $BP_DIR/lib/utils

export_env_dir "$ENV_DIR"
export NUGET_XMLDOC_MODE=${NUGET_XMLDOC_MODE:-skip}
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

DOTNET_SDK_VERSION=${DOTNET_SDK_VERSION:-3.0.100}
DOTNET_RUNTIME_VERSION=${DOTNET_RUNTIME_VERSION:-3.0.0}
BUILD_CONFIGURATION=${BUILD_CONFIGURATION:-Release}

echo "Installing dotnet"
install_dotnet $BUILD_DIR $CACHE_DIR $DOTNET_SDK_VERSION $DOTNET_RUNTIME_VERSION

export PATH="${BUILD_DIR}/.heroku/dotnet:${PATH}"

cd $BUILD_DIR

if [ -z ${PROJECT_FILE:-} ]; then
	PROJECT_FILE=$(x=$(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname Startup.cs -o -iname Program.cs | head -1)); while [[ "$x" =~ $BUILD_DIR ]] ; do find "$x" -maxdepth 1 -name *.csproj; x=`dirname "$x"`; done)
fi
if [ -z ${PROJECT_NAME:-} ]; then
	PROJECT_NAME=$(basename ${PROJECT_FILE%.*})
fi
if [ -n "$(cat $PROJECT_FILE | grep 'netcoreapp2.0')" ]; then
	topic "WARNING"
	echo "For netcoreapp2.0 use https://github.com/jincod/dotnetcore-buildpack#v2.1.200" | indent
	echo "More info https://github.com/jincod/dotnetcore-buildpack/issues/44" | indent
fi

echo "Adding NuGet package from custom source..."
dotnet add package DSharpPlus -s https://nuget.emzi0767.com/api/v3/index.json -v 4.0.0-nightly-00635
dotnet add package DSharpPlus.CommandsNext -s https://nuget.emzi0767.com/api/v3/index.json -v 4.0.0-nightly-00635
dotnet add package DSharpPlus.Lavalink -s https://nuget.emzi0767.com/api/v3/index.json -v 4.0.0-nightly-00635
dotnet add package DSharpPlus.VoiceNext -s https://nuget.emzi0767.com/api/v3/index.json -v 4.0.0-nightly-00635

#echo "Installing sodium binaries..."
#apt-get install libopus0 libsodium18 libopus-dev libsodium-dev
#apt-get install -y libsodium-dev

#echo "Installing opus binaries..."
#wget -c https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz -O - | tar -xz

echo "Looking into stuff..."
echo "1:"
ls
echo "2:"
#cd opus
ls
#cd ..
echo "3:"
#cd vendor
ls
#cd ..


export NUGET_PACKAGES="${CACHE_DIR}/nuget/cache"

echo "publish ${PROJECT_FILE} for ${BUILD_CONFIGURATION}"
dotnet publish $PROJECT_FILE --output ${BUILD_DIR}/heroku_output --configuration ${BUILD_CONFIGURATION} --runtime linux-x64

if [ -f ${BUILD_DIR}/Procfile ] && grep -q '^web:' ${BUILD_DIR}/Procfile ; then
	topic "WARNING"
	echo "Be careful with custom Procfile" | indent
else
	echo "Add web process to Procfile" | indent
	cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/heroku_output && ./${PROJECT_NAME}
EOT
fi
