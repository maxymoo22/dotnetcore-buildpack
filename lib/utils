#!/usr/bin/env bash

# https://github.com/ddollar/heroku-buildpack-apt
function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function install_dotnet() {
  local BUILD_DIR="$1"
  local CACHE_DIR="$2"
  local DOTNET_SDK_VERSION="$3"
  local DOTNET_RUNTIME_VERSION="$4"

  local DOTNET_CACHE_LOCATION=${CACHE_DIR}/dotnet/${DOTNET_SDK_VERSION}
  if [ ! -d ${DOTNET_CACHE_LOCATION} ]; then
    topic "Removing old cached .NET version"
    rm -rf ${CACHE_DIR}/dotnet/* || true
    mkdir -p ${DOTNET_CACHE_LOCATION}/{sdk,runtime}

    topic "Fetching .NET SDK"
    local DOTNET_SDK_DOWNLOAD_URL=https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-sdk-$DOTNET_SDK_VERSION-linux-x64.tar.gz
    curl -sSL ${DOTNET_SDK_DOWNLOAD_URL} | tar xz -C ${DOTNET_CACHE_LOCATION}/sdk
    find ${DOTNET_CACHE_LOCATION}/sdk/sdk/${DOTNET_SDK_VERSION}/runtimes/* -maxdepth 0 ! -name unix -exec rm -r {} +
    rm -f ${DOTNET_CACHE_LOCATION}/sdk/sdk/${DOTNET_SDK_VERSION}/nuGetPackagesArchive.lzma

    topic "Fetching .NET Runtime"
    local DOTNET_RUNTIME_DOWNLOAD_URL=https://dotnetcli.blob.core.windows.net/dotnet/Runtime/$DOTNET_RUNTIME_VERSION/dotnet-runtime-$DOTNET_RUNTIME_VERSION-linux-x64.tar.gz
    curl -sSL ${DOTNET_RUNTIME_DOWNLOAD_URL} | tar xz -C ${DOTNET_CACHE_LOCATION}/runtime
  fi

  export PATH="${DOTNET_CACHE_LOCATION}/sdk:$PATH"
  mkdir -p ${BUILD_DIR}/.heroku/dotnet
  cp -r ${DOTNET_CACHE_LOCATION}/runtime ${BUILD_DIR}/.heroku/dotnet
}

export_env_dir() {
  local env_dir=$1
  if [ -d "$env_dir" ]; then
    local whitelist_regex=${2:-''}
    local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|LANG)$'}
    if [ -d "$env_dir" ]; then
      for e in $(ls $env_dir); do
        echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        export "$e=$(cat $env_dir/$e)"
        :
      done
    fi
  fi
}

function install_nuget() {
  echo "Installing mono"
  apt install gnupg ca-certificates
  apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
  echo "deb https://download.mono-project.com/repo/ubuntu stable-bionic main" | tee /etc/apt/sources.list.d/mono-official-stable.list
  apt update
  apt install mono-devel
  echo "installing nuget"
  mkdir nugetLocation
  curl -o nugetLocation/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
  alias nuget="mono /usr/local/bin/nuget.exe"
}

function otherIndentFunctionThingy() {
  sed 's/^/       /'
}

function installOpusAndSodium() {
  echo "Installing opus..."
  PROFILE_PATH="$1/.profile.d/opus.sh"
  OPUS_VERSION="1.3.1"
  
  echo "exporting PATH and LIBRARY_PATH" | otherIndentFunctionThingy
  mkdir -p $(dirname $PROFILE_PATH)
  
  echo 'export PATH="$PATH:$HOME/opus/bin"' >> $PROFILE_PATH
  echo 'export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/opus/lib"' >> $PROFILE_PATH
  
  mkdir -p "$1/opus"
  export BUILD_DIR=$1"/opus"
  echo "-----> Building in $BUILD_DIR"

  echo "-----> Starting opus compilation"
  echo "Downloading opus-$OPUS_VERSION.tar.gz" | otherIndentFunctionThingy
  wget --quiet https://archive.mozilla.org/pub/opus/opus-$OPUS_VERSION.tar.gz
  echo "Unpacking opus" | otherIndentFunctionThingy
  tar -xf opus-$OPUS_VERSION.tar.gz
  cd opus-$OPUS_VERSION
  echo "Running configure" | otherIndentFunctionThingy
  ./configure --prefix="$BUILD_DIR" >/dev/null 2>&1
  echo "Running make install" | otherIndentFunctionThingy
  make install >/dev/null 2>&1
  
  
  echo "Installing sodium...  wait nah boi"
}
